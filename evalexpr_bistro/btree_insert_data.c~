/*
** EPITECH PROJECT, 2017
** btree_insert_data.c
** File description:
** insert data in btree
*/

#include "btree.h"
#include <stdlib.h>

btree_t *btree_create_node(int value, char op, int (*valfunc)(btree_t *));
int btree_t_val(btree_t *self);

static int cmp_prio(char op1, char op2)
{
	if ((op1 == '-' || op1 == '+')
		&& (op2 == '*' || op2 == '/' || op2 == '%'))
		return (2);
	return (1);
}

static int	btree_cmp_prio(char op1, char op2, int last_was_par)
{
	if (op1 == ' ' || last_was_par == 1) {
		return (0);
	}
	return(cmp_prio(op1, op2));
}



void btree_insert_data(btree_t **root, char op, int value, int last_was_par)
{
	int comp;
	btree_t *new_node;
	
	if (root != NULL && *root != NULL) {
		comp = btree_cmp_prio((*root)->op, op, last_was_par);
		if (op == ' ') {
			btree_insert_data(&(*root)->right, op, value, last_was_par);
		}
		else if (comp == 1 || comp == 0) {
			new_node = btree_create_node(value, op, &btree_t_val);
			new_node->left = *root;
			*root = new_node;
		} else {
			new_node = btree_create_node(value, op, &btree_t_val);
			new_node->left = (*root)->right;
			(*root)->right = new_node;
		}
	} else if (root != NULL && *root == NULL) {
		*root = btree_create_node(value, op, &btree_t_val);
	}
}

/*void btree_insert_data(btree_t **root, char op, int value, int (*cmpf)(char, char))
{
	int comp;
	btree_t *new_node;
	
	if (root != NULL && *root != NULL) {
		comp = (*cmpf)((*root)->op, op);
		if (op == ' ') {
			btree_insert_data(&(*root)->right, op, value, cmpf);
		}
		else if (comp == 1 || comp == 0) {
			new_node = btree_create_node(value, op, &btree_t_val);
			new_node->left = *root;
			*root = new_node;
		} else {
			new_node = btree_create_node(value, op, &btree_t_val);
			new_node->left = (*root)->right;
			(*root)->right = new_node;
		}
	} else if (root != NULL && *root == NULL) {
		*root = btree_create_node(value, op, &btree_t_val);
	}
}

*/
